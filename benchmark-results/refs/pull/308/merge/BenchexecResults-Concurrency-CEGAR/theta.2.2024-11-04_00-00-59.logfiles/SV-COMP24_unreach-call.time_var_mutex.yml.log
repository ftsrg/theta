Theta/theta-start.sh sv-benchmarks/c/pthread-atomic/time_var_mutex.i --disable-xcfa-serialization --disable-c-serialization --disable-arg-generation --backend PORTFOLIO --loglevel INFO --property sv-benchmarks/c/properties/unreach-call.prp --architecture ILP32


--------------------------------------------------------------------------------


LD_LIBRARY_PATH=/home/runner/work/theta/theta/Theta/lib /usr/lib/jvm/java-17-openjdk-amd64/bin/java -Xss120m -Xmx14210m -jar /home/runner/work/theta/theta/Theta/theta.jar --disable-xcfa-serialization --disable-c-serialization --disable-arg-generation --backend PORTFOLIO --loglevel INFO --property sv-benchmarks/c/properties/unreach-call.prp --architecture ILP32 --portfolio CEGAR --input sv-benchmarks/c/pthread-atomic/time_var_mutex.i --smt-home /home/runner/work/theta/theta/Theta/solvers
Registered Legacy-Z3 SolverManager
Registered Z3 SolverManager
Registered JavaSMT SolverManager
Registered SMT-LIB SolverManager
Parsing the input sv-benchmarks/c/pthread-atomic/time_var_mutex.i as C
WARNING: signedness of the type char is implementation specific. Right now it is interpreted as a signed char.
WARNING: CompoundDefinitions are not yet implemented!
WARNING: Unknown simple type union pthread_attr_t
WARNING: enums are not yet supported! Using int instead.
Arithmetic: []
Frontend finished:   (in 726 ms)
ParsingResult Success
Alias graph size: 0 -> []
Starting verification of UnnamedXcfa using PORTFOLIO
Using portfolio MULTITHREAD
Current configuration: XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, property=ERROR_LOCATION, frontendConfig=FrontendConfig(lbeLevel=LBE_LOCAL, staticCoi=false, loopUnroll=1000, forceUnroll=-1, enableFew=false, inputType=C, specConfig=CFrontendConfig(arithmetic=efficient, architecture=LP64)), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=150000, inProcess=true, specConfig=CegarConfig(initPrec=EMPTY, porLevel=AASPOR, porRandomSeed=-1, coi=COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=Z3, validateAbstractionSolver=false, domain=EXPL, maxEnum=1, search=DFS, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=Z3, validateRefinementSolver=false, refinement=SEQ_ITP, exprSplitter=WHOLE, pruneStrategy=FULL))), outputConfig=OutputConfig(versionInfo=false, enableOutput=false, resultFolder=., cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=false), chcOutputConfig=ChcOutputConfig(disable=false), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=INFO, argdebug=false, argToFile=false))
Registered Legacy-Z3 SolverManager
Registered Z3 SolverManager
Registered JavaSMT SolverManager
Registered SMT-LIB SolverManager
Starting verification of UnnamedXcfa using CEGAR
server: line 1:15 no viable alternative at input '*'
server: Could not parse (assign m_inode* 2)
server: scope: Scope{
server: enclosingScope: null
server: symbolTable: SymbolTable(hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@23bb8443, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@49438269, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@ba2f4ec, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@1c1bbc4e, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@55fe41ea, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@fbd1f6, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@1ce24091, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@5939a379, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@2177849e, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@40cb8df7, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@73877e19, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@34523d46, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@7cedfa63, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@3e83c18, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@783efb48, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@5d235104, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@4e8e8621, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@c446b14, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@3af356f, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@d1a10ac, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@6fca2a8f, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@31fc71ab, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@71391b3f, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@2cfbeac4, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@12db3386, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@425d5d46, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@198ef2ce, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@4cbd03e7, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@52fc5eb1, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@7a639ec5, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@14151bc5, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@3013909b, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@2a49fe, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@66596a88, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@5aae8eb5, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@76954a33, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fe288099f38@24a298a6) }
server: env: Env( (Frame block <- (var block Int) busy <- (var busy Int) inode <- (var inode Int) m_inode <- (var m_inode Int) m_busy <- (var m_busy Int) m_inode* <- (var m_inode* Int) m_busy* <- (var m_busy* Int) assume_abort_if_not_ret <- (var assume_abort_if_not_ret Int) assume_abort_if_not::cond <- (var assume_abort_if_not::cond Int) call_abort_ret0 <- (var call_abort_ret0 Int) reach_error_ret <- (var reach_error_ret Int) allocator_ret <- (var allocator_ret Int) allocator::_ <- (var allocator::_ Int) call_pthread_mutex_lock_ret1 <- (var call_pthread_mutex_lock_ret1 Int) call_pthread_mutex_lock_ret2 <- (var call_pthread_mutex_lock_ret2 Int) call_pthread_mutex_unlock_ret3 <- (var call_pthread_mutex_unlock_ret3 Int) call_reach_error_ret4 <- (var call_reach_error_ret4 Int) call_abort_ret5 <- (var call_abort_ret5 Int) call_pthread_mutex_unlock_ret6 <- (var call_pthread_mutex_unlock_ret6 Int) de_allocator_ret <- (var de_allocator_ret Int) de_allocator::_ <- (var de_allocator::_ Int) call_pthread_mutex_lock_ret7 <- (var call_pthread_mutex_lock_ret7 Int) call_reach_error_ret8 <- (var call_reach_error_ret8 Int) call_abort_ret9 <- (var call_abort_ret9 Int) call_pthread_mutex_unlock_ret10 <- (var call_pthread_mutex_unlock_ret10 Int) main_ret <- (var main_ret Int) main::t1 <- (var main::t1 Int) main::t2 <- (var main::t2 Int) call_assume_abort_if_not_ret11 <- (var call_assume_abort_if_not_ret11 Int) call_pthread_mutex_init_ret12 <- (var call_pthread_mutex_init_ret12 Int) call_pthread_mutex_init_ret13 <- (var call_pthread_mutex_init_ret13 Int) call_pthread_create_ret14 <- (var call_pthread_create_ret14 Int) call_pthread_create_ret15 <- (var call_pthread_create_ret15 Int) call_pthread_join_ret16 <- (var call_pthread_join_ret16 Int) call_pthread_join_ret17 <- (var call_pthread_join_ret17 Int) call_pthread_mutex_destroy_ret18 <- (var call_pthread_mutex_destroy_ret18 Int) call_pthread_mutex_destroy_ret19 <- (var call_pthread_mutex_destroy_ret19 Int)) )
server: type: StmtLabel
server: Exception in thread "main" java.lang.reflect.InvocationTargetException
server: 	at jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
server: 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
server: 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
server: 	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)
server: 	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)
server: 	at kotlin.reflect.jvm.internal.KCallableImpl.call(KCallableImpl.kt:108)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:83)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:69)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:33)
server: 	at com.google.gson.internal.bind.TypeAdapters$34$1.read(TypeAdapters.java:979)
server: 	at com.google.gson.Gson.fromJson(Gson.java:1058)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.parseProcedures(XcfaAdapter.kt:191)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.read(XcfaAdapter.kt:109)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.read(XcfaAdapter.kt:29)
server: 	at com.google.gson.internal.bind.TypeAdapters$34$1.read(TypeAdapters.java:979)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.Gson.fromJson(Gson.java:1058)
server: 	at com.google.gson.Gson.fromJson(Gson.java:986)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:56)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:35)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:130)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
server: Caused by: org.antlr.v4.runtime.misc.ParseCancellationException
server: 	at org.antlr.v4.runtime.BailErrorStrategy.recover(BailErrorStrategy.java:51)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.funcLitExpr(StmtParser.java:764)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.expr(StmtParser.java:608)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.assignStmt(StmtParser.java:397)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.stmt(StmtParser.java:210)
server: 	at hu.bme.mit.theta.grammar.dsl.stmt.StatementWrapper.<init>(StmtParser.kt:54)
server: 	at hu.bme.mit.theta.xcfa.model.StmtLabel$Companion.fromString(XcfaLabel.kt:163)
server: 	... 27 more
server: Caused by: org.antlr.v4.runtime.NoViableAltException
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.noViableAlt(ParserATNSimulator.java:2026)
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.execATN(ParserATNSimulator.java:467)
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.adaptivePredict(ParserATNSimulator.java:393)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.funcLitExpr(StmtParser.java:736)
server: 	... 32 more
ErrorCodeException(code=1)
	at hu.bme.mit.theta.xcfa.cli.checkers.InProcessChecker.check(InProcessChecker.kt:118)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:242)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:60)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:85)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex24Kt$complexPortfolio24$checker$1.invoke(complex24.kt:42)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex24Kt$complexPortfolio24$checker$1.invoke(complex24.kt:42)
	at hu.bme.mit.theta.xcfa.cli.portfolio.ConfigNode.execute(stm.kt:44)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:111)
	at hu.bme.mit.theta.xcfa.cli.portfolio.HierarchicalNode.execute(stm.kt:33)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:111)
	at hu.bme.mit.theta.xcfa.cli.checkers.ConfigToPortfolioKt.getPortfolioChecker$lambda$0(ConfigToPortfolio.kt:82)
	at hu.bme.mit.theta.analysis.algorithm.SafetyChecker.check(SafetyChecker.java:27)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:242)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:60)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:85)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:120)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:35)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:130)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
Caught exception: ErrorCodeException(code=1)
Handling exception as TimeoutOrNotSolvableError
Current configuration: XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, property=ERROR_LOCATION, frontendConfig=FrontendConfig(lbeLevel=LBE_LOCAL, staticCoi=false, loopUnroll=1000, forceUnroll=-1, enableFew=false, inputType=C, specConfig=CFrontendConfig(arithmetic=efficient, architecture=LP64)), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=300000, inProcess=true, specConfig=CegarConfig(initPrec=EMPTY, porLevel=AASPOR, porRandomSeed=-1, coi=COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=z3:4.12.2, validateAbstractionSolver=false, domain=EXPL, maxEnum=1, search=DFS, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=z3:4.12.2, validateRefinementSolver=false, refinement=NWT_IT_WP, exprSplitter=WHOLE, pruneStrategy=FULL))), outputConfig=OutputConfig(versionInfo=false, enableOutput=false, resultFolder=., cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=false), chcOutputConfig=ChcOutputConfig(disable=false), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=INFO, argdebug=false, argToFile=false))
Registered Legacy-Z3 SolverManager
Registered Z3 SolverManager
Registered JavaSMT SolverManager
Registered SMT-LIB SolverManager
Starting verification of UnnamedXcfa using CEGAR
server: line 1:15 no viable alternative at input '*'
server: Could not parse (assign m_inode* 2)
server: scope: Scope{
server: enclosingScope: null
server: symbolTable: SymbolTable(hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@23bb8443, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@49438269, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@ba2f4ec, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@1c1bbc4e, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@55fe41ea, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@fbd1f6, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@1ce24091, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@5939a379, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@2177849e, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@40cb8df7, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@73877e19, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@34523d46, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@7cedfa63, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@3e83c18, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@783efb48, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@5d235104, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@4e8e8621, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@c446b14, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@3af356f, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@d1a10ac, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@6fca2a8f, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@31fc71ab, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@71391b3f, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@2cfbeac4, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@12db3386, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@425d5d46, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@198ef2ce, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@4cbd03e7, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@52fc5eb1, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@7a639ec5, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@14151bc5, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@3013909b, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@2a49fe, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@66596a88, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@5aae8eb5, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@76954a33, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f9810099f38@24a298a6) }
server: env: Env( (Frame block <- (var block Int) busy <- (var busy Int) inode <- (var inode Int) m_inode <- (var m_inode Int) m_busy <- (var m_busy Int) m_inode* <- (var m_inode* Int) m_busy* <- (var m_busy* Int) assume_abort_if_not_ret <- (var assume_abort_if_not_ret Int) assume_abort_if_not::cond <- (var assume_abort_if_not::cond Int) call_abort_ret0 <- (var call_abort_ret0 Int) reach_error_ret <- (var reach_error_ret Int) allocator_ret <- (var allocator_ret Int) allocator::_ <- (var allocator::_ Int) call_pthread_mutex_lock_ret1 <- (var call_pthread_mutex_lock_ret1 Int) call_pthread_mutex_lock_ret2 <- (var call_pthread_mutex_lock_ret2 Int) call_pthread_mutex_unlock_ret3 <- (var call_pthread_mutex_unlock_ret3 Int) call_reach_error_ret4 <- (var call_reach_error_ret4 Int) call_abort_ret5 <- (var call_abort_ret5 Int) call_pthread_mutex_unlock_ret6 <- (var call_pthread_mutex_unlock_ret6 Int) de_allocator_ret <- (var de_allocator_ret Int) de_allocator::_ <- (var de_allocator::_ Int) call_pthread_mutex_lock_ret7 <- (var call_pthread_mutex_lock_ret7 Int) call_reach_error_ret8 <- (var call_reach_error_ret8 Int) call_abort_ret9 <- (var call_abort_ret9 Int) call_pthread_mutex_unlock_ret10 <- (var call_pthread_mutex_unlock_ret10 Int) main_ret <- (var main_ret Int) main::t1 <- (var main::t1 Int) main::t2 <- (var main::t2 Int) call_assume_abort_if_not_ret11 <- (var call_assume_abort_if_not_ret11 Int) call_pthread_mutex_init_ret12 <- (var call_pthread_mutex_init_ret12 Int) call_pthread_mutex_init_ret13 <- (var call_pthread_mutex_init_ret13 Int) call_pthread_create_ret14 <- (var call_pthread_create_ret14 Int) call_pthread_create_ret15 <- (var call_pthread_create_ret15 Int) call_pthread_join_ret16 <- (var call_pthread_join_ret16 Int) call_pthread_join_ret17 <- (var call_pthread_join_ret17 Int) call_pthread_mutex_destroy_ret18 <- (var call_pthread_mutex_destroy_ret18 Int) call_pthread_mutex_destroy_ret19 <- (var call_pthread_mutex_destroy_ret19 Int)) )
server: type: StmtLabel
server: Exception in thread "main" java.lang.reflect.InvocationTargetException
server: 	at jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
server: 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
server: 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
server: 	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)
server: 	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)
server: 	at kotlin.reflect.jvm.internal.KCallableImpl.call(KCallableImpl.kt:108)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:83)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:69)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:33)
server: 	at com.google.gson.internal.bind.TypeAdapters$34$1.read(TypeAdapters.java:979)
server: 	at com.google.gson.Gson.fromJson(Gson.java:1058)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.parseProcedures(XcfaAdapter.kt:191)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.read(XcfaAdapter.kt:109)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.read(XcfaAdapter.kt:29)
server: 	at com.google.gson.internal.bind.TypeAdapters$34$1.read(TypeAdapters.java:979)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.Gson.fromJson(Gson.java:1058)
server: 	at com.google.gson.Gson.fromJson(Gson.java:986)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:56)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:35)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:130)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
server: Caused by: org.antlr.v4.runtime.misc.ParseCancellationException
server: 	at org.antlr.v4.runtime.BailErrorStrategy.recover(BailErrorStrategy.java:51)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.funcLitExpr(StmtParser.java:764)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.expr(StmtParser.java:608)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.assignStmt(StmtParser.java:397)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.stmt(StmtParser.java:210)
server: 	at hu.bme.mit.theta.grammar.dsl.stmt.StatementWrapper.<init>(StmtParser.kt:54)
server: 	at hu.bme.mit.theta.xcfa.model.StmtLabel$Companion.fromString(XcfaLabel.kt:163)
server: 	... 27 more
server: Caused by: org.antlr.v4.runtime.NoViableAltException
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.noViableAlt(ParserATNSimulator.java:2026)
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.execATN(ParserATNSimulator.java:467)
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.adaptivePredict(ParserATNSimulator.java:393)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.funcLitExpr(StmtParser.java:736)
server: 	... 32 more
ErrorCodeException(code=1)
	at hu.bme.mit.theta.xcfa.cli.checkers.InProcessChecker.check(InProcessChecker.kt:118)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:242)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:60)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:85)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex24Kt$complexPortfolio24$checker$1.invoke(complex24.kt:42)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex24Kt$complexPortfolio24$checker$1.invoke(complex24.kt:42)
	at hu.bme.mit.theta.xcfa.cli.portfolio.ConfigNode.execute(stm.kt:44)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:111)
	at hu.bme.mit.theta.xcfa.cli.portfolio.HierarchicalNode.execute(stm.kt:33)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:111)
	at hu.bme.mit.theta.xcfa.cli.checkers.ConfigToPortfolioKt.getPortfolioChecker$lambda$0(ConfigToPortfolio.kt:82)
	at hu.bme.mit.theta.analysis.algorithm.SafetyChecker.check(SafetyChecker.java:27)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:242)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:60)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:85)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:120)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:35)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:130)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
Caught exception: ErrorCodeException(code=1)
Handling exception as TimeoutOrNotSolvableError
Current configuration: XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, property=ERROR_LOCATION, frontendConfig=FrontendConfig(lbeLevel=LBE_LOCAL, staticCoi=false, loopUnroll=1000, forceUnroll=-1, enableFew=false, inputType=C, specConfig=CFrontendConfig(arithmetic=efficient, architecture=LP64)), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=0, inProcess=true, specConfig=CegarConfig(initPrec=EMPTY, porLevel=AASPOR, porRandomSeed=-1, coi=COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=Z3, validateAbstractionSolver=false, domain=PRED_CART, maxEnum=1, search=DFS, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=Z3, validateRefinementSolver=false, refinement=SEQ_ITP, exprSplitter=WHOLE, pruneStrategy=FULL))), outputConfig=OutputConfig(versionInfo=false, enableOutput=false, resultFolder=., cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=false), chcOutputConfig=ChcOutputConfig(disable=false), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=INFO, argdebug=false, argToFile=false))
Registered Legacy-Z3 SolverManager
Registered Z3 SolverManager
Registered JavaSMT SolverManager
Registered SMT-LIB SolverManager
Starting verification of UnnamedXcfa using CEGAR
server: line 1:15 no viable alternative at input '*'
server: Could not parse (assign m_inode* 2)
server: scope: Scope{
server: enclosingScope: null
server: symbolTable: SymbolTable(hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@23bb8443, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@49438269, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@ba2f4ec, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@1c1bbc4e, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@55fe41ea, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@fbd1f6, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@1ce24091, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@5939a379, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@2177849e, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@40cb8df7, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@73877e19, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@34523d46, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@7cedfa63, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@3e83c18, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@783efb48, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@5d235104, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@4e8e8621, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@c446b14, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@3af356f, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@d1a10ac, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@6fca2a8f, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@31fc71ab, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@71391b3f, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@2cfbeac4, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@12db3386, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@425d5d46, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@198ef2ce, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@4cbd03e7, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@52fc5eb1, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@7a639ec5, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@14151bc5, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@3013909b, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@2a49fe, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@66596a88, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@5aae8eb5, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@76954a33, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd5c0099f38@24a298a6) }
server: env: Env( (Frame block <- (var block Int) busy <- (var busy Int) inode <- (var inode Int) m_inode <- (var m_inode Int) m_busy <- (var m_busy Int) m_inode* <- (var m_inode* Int) m_busy* <- (var m_busy* Int) assume_abort_if_not_ret <- (var assume_abort_if_not_ret Int) assume_abort_if_not::cond <- (var assume_abort_if_not::cond Int) call_abort_ret0 <- (var call_abort_ret0 Int) reach_error_ret <- (var reach_error_ret Int) allocator_ret <- (var allocator_ret Int) allocator::_ <- (var allocator::_ Int) call_pthread_mutex_lock_ret1 <- (var call_pthread_mutex_lock_ret1 Int) call_pthread_mutex_lock_ret2 <- (var call_pthread_mutex_lock_ret2 Int) call_pthread_mutex_unlock_ret3 <- (var call_pthread_mutex_unlock_ret3 Int) call_reach_error_ret4 <- (var call_reach_error_ret4 Int) call_abort_ret5 <- (var call_abort_ret5 Int) call_pthread_mutex_unlock_ret6 <- (var call_pthread_mutex_unlock_ret6 Int) de_allocator_ret <- (var de_allocator_ret Int) de_allocator::_ <- (var de_allocator::_ Int) call_pthread_mutex_lock_ret7 <- (var call_pthread_mutex_lock_ret7 Int) call_reach_error_ret8 <- (var call_reach_error_ret8 Int) call_abort_ret9 <- (var call_abort_ret9 Int) call_pthread_mutex_unlock_ret10 <- (var call_pthread_mutex_unlock_ret10 Int) main_ret <- (var main_ret Int) main::t1 <- (var main::t1 Int) main::t2 <- (var main::t2 Int) call_assume_abort_if_not_ret11 <- (var call_assume_abort_if_not_ret11 Int) call_pthread_mutex_init_ret12 <- (var call_pthread_mutex_init_ret12 Int) call_pthread_mutex_init_ret13 <- (var call_pthread_mutex_init_ret13 Int) call_pthread_create_ret14 <- (var call_pthread_create_ret14 Int) call_pthread_create_ret15 <- (var call_pthread_create_ret15 Int) call_pthread_join_ret16 <- (var call_pthread_join_ret16 Int) call_pthread_join_ret17 <- (var call_pthread_join_ret17 Int) call_pthread_mutex_destroy_ret18 <- (var call_pthread_mutex_destroy_ret18 Int) call_pthread_mutex_destroy_ret19 <- (var call_pthread_mutex_destroy_ret19 Int)) )
server: type: StmtLabel
server: Exception in thread "main" java.lang.reflect.InvocationTargetException
server: 	at jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
server: 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
server: 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
server: 	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)
server: 	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)
server: 	at kotlin.reflect.jvm.internal.KCallableImpl.call(KCallableImpl.kt:108)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:83)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:69)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:33)
server: 	at com.google.gson.internal.bind.TypeAdapters$34$1.read(TypeAdapters.java:979)
server: 	at com.google.gson.Gson.fromJson(Gson.java:1058)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.parseProcedures(XcfaAdapter.kt:191)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.read(XcfaAdapter.kt:109)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.read(XcfaAdapter.kt:29)
server: 	at com.google.gson.internal.bind.TypeAdapters$34$1.read(TypeAdapters.java:979)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.Gson.fromJson(Gson.java:1058)
server: 	at com.google.gson.Gson.fromJson(Gson.java:986)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:56)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:35)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:130)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
server: Caused by: org.antlr.v4.runtime.misc.ParseCancellationException
server: 	at org.antlr.v4.runtime.BailErrorStrategy.recover(BailErrorStrategy.java:51)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.funcLitExpr(StmtParser.java:764)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.expr(StmtParser.java:608)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.assignStmt(StmtParser.java:397)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.stmt(StmtParser.java:210)
server: 	at hu.bme.mit.theta.grammar.dsl.stmt.StatementWrapper.<init>(StmtParser.kt:54)
server: 	at hu.bme.mit.theta.xcfa.model.StmtLabel$Companion.fromString(XcfaLabel.kt:163)
server: 	... 27 more
server: Caused by: org.antlr.v4.runtime.NoViableAltException
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.noViableAlt(ParserATNSimulator.java:2026)
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.execATN(ParserATNSimulator.java:467)
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.adaptivePredict(ParserATNSimulator.java:393)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.funcLitExpr(StmtParser.java:736)
server: 	... 32 more
ErrorCodeException(code=1)
	at hu.bme.mit.theta.xcfa.cli.checkers.InProcessChecker.check(InProcessChecker.kt:118)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:242)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:60)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:85)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex24Kt$complexPortfolio24$checker$1.invoke(complex24.kt:42)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex24Kt$complexPortfolio24$checker$1.invoke(complex24.kt:42)
	at hu.bme.mit.theta.xcfa.cli.portfolio.ConfigNode.execute(stm.kt:44)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:111)
	at hu.bme.mit.theta.xcfa.cli.portfolio.HierarchicalNode.execute(stm.kt:33)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:111)
	at hu.bme.mit.theta.xcfa.cli.checkers.ConfigToPortfolioKt.getPortfolioChecker$lambda$0(ConfigToPortfolio.kt:82)
	at hu.bme.mit.theta.analysis.algorithm.SafetyChecker.check(SafetyChecker.java:27)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:242)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:60)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:85)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:120)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:35)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:130)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
Caught exception: ErrorCodeException(code=1)
Could not handle trigger ErrorCodeException(code=1) (Available triggers: [SolverError])
Caught exception: ErrorCodeException(code=1)
Handling exception as Anything
Current configuration: XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, property=ERROR_LOCATION, frontendConfig=FrontendConfig(lbeLevel=LBE_LOCAL, staticCoi=false, loopUnroll=1000, forceUnroll=-1, enableFew=false, inputType=C, specConfig=CFrontendConfig(arithmetic=efficient, architecture=LP64)), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=150000, inProcess=false, specConfig=CegarConfig(initPrec=EMPTY, porLevel=AASPOR, porRandomSeed=-1, coi=COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=Z3, validateAbstractionSolver=false, domain=EXPL, maxEnum=1, search=DFS, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=Z3, validateRefinementSolver=false, refinement=SEQ_ITP, exprSplitter=WHOLE, pruneStrategy=FULL))), outputConfig=OutputConfig(versionInfo=false, enableOutput=false, resultFolder=., cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=false), chcOutputConfig=ChcOutputConfig(disable=false), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=INFO, argdebug=false, argToFile=false))
Registered Legacy-Z3 SolverManager
Registered Z3 SolverManager
Registered JavaSMT SolverManager
Registered SMT-LIB SolverManager
Starting verification of UnnamedXcfa using CEGAR
Configuration: (CegarChecker (XcfaArgAbstractor (PriorityWaitlist (Combinator TargetFirst (Combinator (Inverter DepthOrder) CreationOrder)))) hu.bme.mit.theta.analysis.expr.refinement.AasporRefiner@5bb911c1)
Iteration 1
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...done
|  |  Finished ARG: 22 nodes, 4 incomplete, 1 unsafe
| Checking abstraction done, result: (AbstractorResult Unsafe)
| Refining abstraction...
|  |  Trace length: 16
|  |  Checking trace...done, result: (ExprTraceStatus Infeasible)
|  |  Pruning whole ARGdone
Refining abstraction done, result: (RefinerResult Spurious)
! Precision DID change in this iteration
Iteration 2
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...done
|  |  Finished ARG: 42 nodes, 7 incomplete, 1 unsafe
| Checking abstraction done, result: (AbstractorResult Unsafe)
| Refining abstraction...
|  |  Trace length: 20
|  |  Checking trace...done, result: (ExprTraceStatus Infeasible)
|  |  Pruning whole ARGdone
Refining abstraction done, result: (RefinerResult Spurious)
! Precision DID change in this iteration
Iteration 3
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...done
|  |  Finished ARG: 47 nodes, 6 incomplete, 1 unsafe
| Checking abstraction done, result: (AbstractorResult Unsafe)
| Refining abstraction...
|  |  Trace length: 17
|  |  Checking trace...done, result: (ExprTraceStatus Infeasible)
|  |  Pruning whole ARGdone
Refining abstraction done, result: (RefinerResult Spurious)
! Precision DID change in this iteration
Iteration 4
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...done
|  |  Finished ARG: 77 nodes, 0 incomplete, 0 unsafe
| Checking abstraction done, result: (AbstractorResult Safe)
(SafetyResult Safe)
AlgorithmTimeMs: 220
Iterations: 4

Backend finished (in 308 ms)
(SafetyResult Safe)
Config XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, property=ERROR_LOCATION, frontendConfig=FrontendConfig(lbeLevel=LBE_LOCAL, staticCoi=false, loopUnroll=1000, forceUnroll=-1, enableFew=false, inputType=C, specConfig=CFrontendConfig(arithmetic=efficient, architecture=LP64)), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=150000, inProcess=false, specConfig=CegarConfig(initPrec=EMPTY, porLevel=AASPOR, porRandomSeed=-1, coi=COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=Z3, validateAbstractionSolver=false, domain=EXPL, maxEnum=1, search=DFS, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=Z3, validateRefinementSolver=false, refinement=SEQ_ITP, exprSplitter=WHOLE, pruneStrategy=FULL))), outputConfig=OutputConfig(versionInfo=false, enableOutput=false, resultFolder=., cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=false), chcOutputConfig=ChcOutputConfig(disable=false), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=INFO, argdebug=false, argToFile=false)) succeeded in 3487 ms
Backend finished (in 3490 ms)
(SafetyResult Safe)
