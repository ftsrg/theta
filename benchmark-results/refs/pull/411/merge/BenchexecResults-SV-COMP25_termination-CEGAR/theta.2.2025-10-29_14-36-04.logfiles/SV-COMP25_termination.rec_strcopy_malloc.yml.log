Theta/theta-start.sh sv-benchmarks/c/termination-recursive-malloc/rec_strcopy_malloc.i --svcomp --portfolio CEGAR --loglevel RESULT --property sv-benchmarks/c/properties/termination.prp --architecture LP64


--------------------------------------------------------------------------------


Verifying input 'sv-benchmarks/c/termination-recursive-malloc/rec_strcopy_malloc.i' using arguments '--svcomp --portfolio CEGAR --loglevel RESULT --property sv-benchmarks/c/properties/termination.prp --architecture LP64'
LD_LIBRARY_PATH=/home/runner/work/theta/theta/Theta/lib java -Xss120m -Xmx14210m -jar /home/runner/work/theta/theta/Theta/theta.jar --svcomp --portfolio CEGAR --loglevel RESULT --property sv-benchmarks/c/properties/termination.prp --architecture LP64 --input sv-benchmarks/c/termination-recursive-malloc/rec_strcopy_malloc.i --smt-home /home/runner/work/theta/theta/Theta/solvers
Arithmetic: [NONLIN_INT]
ParsingResult Success
Alias graph size: 3 -> [2, 2, 0]
Using portfolio PTR
Current configuration: XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, inputProperty=TERMINATION, frontendConfig=FrontendConfig(lbeLevel=LBE_SEQ, enableStaticCoi=false, loopUnroll=1000, forceUnroll=-1, enableDataRaceToReachability=false, enableFew=false, inputType=C, specConfig=null), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=100000, inProcess=true, parseInProcess=false, memlimit=0, specConfig=CegarConfig(initPrec=EMPTY, por=NOPOR, porSeed=-1, coi=NO_COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=Z3, validateAbstractionSolver=false, domain=EXPL, maxEnum=1, search=BFS, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=Z3, validateRefinementSolver=false, refinement=SEQ_ITP, exprSplitter=WHOLE, pruneStrategy=LAZY))), outputConfig=OutputConfig(versionInfo=false, enableOutput=true, resultFolder=., acceptUnreliableSafe=false, cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=true), chcOutputConfig=ChcOutputConfig(disable=true), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false, inputFileForWitness=sv-benchmarks/c/termination-recursive-malloc/rec_strcopy_malloc.i), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=RESULT, argdebug=false, argToFile=false))
server: Exception in thread "main" java.lang.IllegalStateException: The error detection mode TERMINATION cannot be converted to a state predicate. Consider using a specification transformation.
server: 	at hu.bme.mit.theta.xcfa.analysis.XcfaAnalysisKt.getXcfaErrorPredicate(XcfaAnalysis.kt:218)
server: 	at hu.bme.mit.theta.xcfa.analysis.XcfaAnalysisKt.getXcfaArgBuilder(XcfaAnalysis.kt:252)
server: 	at hu.bme.mit.theta.xcfa.analysis.XcfaAnalysisKt.getXcfaAbstractor(XcfaAnalysis.kt:262)
server: 	at hu.bme.mit.theta.xcfa.cli.params.Domain$1.invoke(ParamValues.kt:144)
server: 	at hu.bme.mit.theta.xcfa.cli.params.Domain$1.invoke(ParamValues.kt:143)
server: 	at hu.bme.mit.theta.xcfa.cli.checkers.ConfigToCegarCheckerKt.getCegarChecker(ConfigToCegarChecker.kt:88)
server: 	at hu.bme.mit.theta.xcfa.cli.checkers.ConfigToCheckerKt.getChecker(ConfigToChecker.kt:48)
server: 	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:270)
server: 	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:90)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:127)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:37)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:137)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
ErrorCodeException(code=1)
	at hu.bme.mit.theta.xcfa.cli.checkers.InProcessChecker.check(InProcessChecker.kt:144)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:273)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:272)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:56)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:272)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:90)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex26Kt$complexPortfolio26$checker$1.invoke(complex26.kt:67)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex26Kt$complexPortfolio26$checker$1.invoke(complex26.kt:67)
	at hu.bme.mit.theta.xcfa.cli.portfolio.ConfigNode.execute(stm.kt:70)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:154)
	at hu.bme.mit.theta.xcfa.cli.portfolio.HierarchicalNode.execute(stm.kt:35)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:154)
	at hu.bme.mit.theta.xcfa.cli.checkers.ConfigToPortfolioKt.getPortfolioChecker$lambda$0(ConfigToPortfolio.kt:108)
	at hu.bme.mit.theta.analysis.algorithm.SafetyChecker.check(SafetyChecker.java:27)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:273)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:272)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:56)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:272)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:90)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:127)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:37)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:137)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
Caught exception: ErrorCodeException(code=1)
Handling exception as TimeoutOrNotSolvableError
Current configuration: XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, inputProperty=TERMINATION, frontendConfig=FrontendConfig(lbeLevel=LBE_SEQ, enableStaticCoi=false, loopUnroll=1000, forceUnroll=-1, enableDataRaceToReachability=false, enableFew=false, inputType=C, specConfig=null), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=0, inProcess=true, parseInProcess=false, memlimit=0, specConfig=CegarConfig(initPrec=EMPTY, por=NOPOR, porSeed=-1, coi=NO_COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=Z3, validateAbstractionSolver=false, domain=PRED_CART, maxEnum=1, search=BFS, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=Z3, validateRefinementSolver=false, refinement=SEQ_ITP, exprSplitter=WHOLE, pruneStrategy=LAZY))), outputConfig=OutputConfig(versionInfo=false, enableOutput=true, resultFolder=., acceptUnreliableSafe=false, cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=true), chcOutputConfig=ChcOutputConfig(disable=true), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false, inputFileForWitness=sv-benchmarks/c/termination-recursive-malloc/rec_strcopy_malloc.i), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=RESULT, argdebug=false, argToFile=false))
server: Exception in thread "main" java.lang.IllegalStateException: The error detection mode TERMINATION cannot be converted to a state predicate. Consider using a specification transformation.
server: 	at hu.bme.mit.theta.xcfa.analysis.XcfaAnalysisKt.getXcfaErrorPredicate(XcfaAnalysis.kt:218)
server: 	at hu.bme.mit.theta.xcfa.analysis.XcfaAnalysisKt.getXcfaArgBuilder(XcfaAnalysis.kt:252)
server: 	at hu.bme.mit.theta.xcfa.analysis.XcfaAnalysisKt.getXcfaAbstractor(XcfaAnalysis.kt:262)
server: 	at hu.bme.mit.theta.xcfa.cli.params.Domain$9.invoke(ParamValues.kt:193)
server: 	at hu.bme.mit.theta.xcfa.cli.params.Domain$9.invoke(ParamValues.kt:192)
server: 	at hu.bme.mit.theta.xcfa.cli.checkers.ConfigToCegarCheckerKt.getCegarChecker(ConfigToCegarChecker.kt:88)
server: 	at hu.bme.mit.theta.xcfa.cli.checkers.ConfigToCheckerKt.getChecker(ConfigToChecker.kt:48)
server: 	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:270)
server: 	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:90)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:127)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:37)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:137)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
ErrorCodeException(code=1)
	at hu.bme.mit.theta.xcfa.cli.checkers.InProcessChecker.check(InProcessChecker.kt:144)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:273)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:272)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:56)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:272)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:90)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex26Kt$complexPortfolio26$checker$1.invoke(complex26.kt:67)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex26Kt$complexPortfolio26$checker$1.invoke(complex26.kt:67)
	at hu.bme.mit.theta.xcfa.cli.portfolio.ConfigNode.execute(stm.kt:70)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:154)
	at hu.bme.mit.theta.xcfa.cli.portfolio.HierarchicalNode.execute(stm.kt:35)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:154)
	at hu.bme.mit.theta.xcfa.cli.checkers.ConfigToPortfolioKt.getPortfolioChecker$lambda$0(ConfigToPortfolio.kt:108)
	at hu.bme.mit.theta.analysis.algorithm.SafetyChecker.check(SafetyChecker.java:27)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:273)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:272)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:56)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:272)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:90)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:127)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:37)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:137)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
Caught exception: ErrorCodeException(code=1)
Could not handle trigger ErrorCodeException(code=1) (Available triggers: [])
Caught exception: ErrorCodeException(code=1)
Handling exception as Anything
Current configuration: XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, inputProperty=TERMINATION, frontendConfig=FrontendConfig(lbeLevel=LBE_SEQ, enableStaticCoi=false, loopUnroll=1000, forceUnroll=-1, enableDataRaceToReachability=false, enableFew=false, inputType=C, specConfig=null), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=100000, inProcess=false, parseInProcess=false, memlimit=0, specConfig=CegarConfig(initPrec=EMPTY, por=NOPOR, porSeed=-1, coi=NO_COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=Z3, validateAbstractionSolver=false, domain=EXPL, maxEnum=1, search=BFS, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=Z3, validateRefinementSolver=false, refinement=SEQ_ITP, exprSplitter=WHOLE, pruneStrategy=LAZY))), outputConfig=OutputConfig(versionInfo=false, enableOutput=true, resultFolder=., acceptUnreliableSafe=false, cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=true), chcOutputConfig=ChcOutputConfig(disable=true), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false, inputFileForWitness=sv-benchmarks/c/termination-recursive-malloc/rec_strcopy_malloc.i), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=RESULT, argdebug=false, argToFile=false))
Caught exception: java.lang.IllegalStateException: The error detection mode TERMINATION cannot be converted to a state predicate. Consider using a specification transformation.
Handling exception as Anything
Current configuration: XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, inputProperty=TERMINATION, frontendConfig=FrontendConfig(lbeLevel=LBE_SEQ, enableStaticCoi=false, loopUnroll=1000, forceUnroll=-1, enableDataRaceToReachability=false, enableFew=false, inputType=C, specConfig=null), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=0, inProcess=false, parseInProcess=false, memlimit=0, specConfig=CegarConfig(initPrec=EMPTY, por=NOPOR, porSeed=-1, coi=NO_COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=Z3, validateAbstractionSolver=false, domain=PRED_CART, maxEnum=1, search=BFS, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=Z3, validateRefinementSolver=false, refinement=SEQ_ITP, exprSplitter=WHOLE, pruneStrategy=LAZY))), outputConfig=OutputConfig(versionInfo=false, enableOutput=true, resultFolder=., acceptUnreliableSafe=false, cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=true), chcOutputConfig=ChcOutputConfig(disable=true), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false, inputFileForWitness=sv-benchmarks/c/termination-recursive-malloc/rec_strcopy_malloc.i), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=RESULT, argdebug=false, argToFile=false))
Caught exception: java.lang.IllegalStateException: The error detection mode TERMINATION cannot be converted to a state predicate. Consider using a specification transformation.
Could not handle trigger java.lang.IllegalStateException: The error detection mode TERMINATION cannot be converted to a state predicate. Consider using a specification transformation. (Available triggers: [])
Caught exception: java.lang.IllegalStateException: The error detection mode TERMINATION cannot be converted to a state predicate. Consider using a specification transformation.
Could not handle trigger java.lang.IllegalStateException: The error detection mode TERMINATION cannot be converted to a state predicate. Consider using a specification transformation. (Available triggers: [])
Process failed! (hu.bme.mit.theta.xcfa.analysis.XcfaAnalysisKt.getXcfaErrorPredicate(XcfaAnalysis.kt:218), java.lang.IllegalStateException: The error detection mode TERMINATION cannot be converted to a state predicate. Consider using a specification transformation.)
