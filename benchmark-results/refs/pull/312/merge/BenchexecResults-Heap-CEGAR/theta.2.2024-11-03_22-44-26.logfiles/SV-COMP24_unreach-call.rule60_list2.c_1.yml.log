Theta/theta-start.sh sv-benchmarks/c/ldv-regression/rule60_list2.c_1.i --disable-xcfa-serialization --disable-c-serialization --disable-arg-generation --backend PORTFOLIO --loglevel INFO --property sv-benchmarks/c/properties/unreach-call.prp --architecture ILP32


--------------------------------------------------------------------------------


LD_LIBRARY_PATH=/home/runner/work/theta/theta/Theta/lib /usr/lib/jvm/java-17-openjdk-amd64/bin/java -Xss120m -Xmx14210m -jar /home/runner/work/theta/theta/Theta/theta.jar --disable-xcfa-serialization --disable-c-serialization --disable-arg-generation --backend PORTFOLIO --loglevel INFO --property sv-benchmarks/c/properties/unreach-call.prp --architecture ILP32 --portfolio CEGAR --input sv-benchmarks/c/ldv-regression/rule60_list2.c_1.i --smt-home /home/runner/work/theta/theta/Theta/solvers
Registered Legacy-Z3 SolverManager
Registered Z3 SolverManager
Registered JavaSMT SolverManager
Registered SMT-LIB SolverManager
Parsing the input sv-benchmarks/c/ldv-regression/rule60_list2.c_1.i as C
WARNING: enums are not yet supported! Using int instead.
WARNING: signedness of the type char is implementation specific. Right now it is interpreted as a signed char.
WARNING: CompoundDefinitions are not yet implemented!
WARNING: Unknown simple type union pthread_attr_t
WARNING: using int(1) as a string constant
Arithmetic: []
Frontend finished:   (in 1004 ms)
ParsingResult Success
Alias graph size: 0 -> []
Starting verification of UnnamedXcfa using PORTFOLIO
Using portfolio LIN_INT
Current configuration: XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, property=ERROR_LOCATION, frontendConfig=FrontendConfig(lbeLevel=LBE_SEQ, staticCoi=false, loopUnroll=1000, forceUnroll=-1, enableFew=false, inputType=C, specConfig=CFrontendConfig(arithmetic=efficient, architecture=LP64)), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=100000, inProcess=true, specConfig=CegarConfig(initPrec=EMPTY, porLevel=NOPOR, porRandomSeed=-1, coi=NO_COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=mathsat:5.6.10, validateAbstractionSolver=false, domain=EXPL, maxEnum=1, search=ERR, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=mathsat:5.6.10, validateRefinementSolver=false, refinement=NWT_IT_WP, exprSplitter=WHOLE, pruneStrategy=FULL))), outputConfig=OutputConfig(versionInfo=false, enableOutput=false, resultFolder=., cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=false), chcOutputConfig=ChcOutputConfig(disable=false), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=INFO, argdebug=false, argToFile=false))
Registered Legacy-Z3 SolverManager
Registered Z3 SolverManager
Registered JavaSMT SolverManager
Registered SMT-LIB SolverManager
Starting verification of UnnamedXcfa using CEGAR
server: line 1:12 no viable alternative at input '*'
server: Could not parse (assign head* 2)
server: scope: Scope{
server: enclosingScope: null
server: symbolTable: SymbolTable(hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@23bb8443, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@49438269, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@ba2f4ec, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@1c1bbc4e, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@306cf3ea, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@e1de817, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@66ea1466, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@1601e47, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@3bffddff, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@66971f6b, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@50687efb, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@517bd097, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@142eef62, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@4d2a1da3, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@252f626c, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@33f98231, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@b10a26d, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@74075134, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@7e4d2287, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@3f4b840d, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@31464a43, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@4682eba5, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@6d9fb2d1, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@61fafb74, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@540a903b, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@58496dc, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@151db587, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@238acd0b, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@23811a09, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@2125ad3, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@7a5b769b, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@f4c0e4e, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007f45fc099f38@24361cfc) }
server: env: Env( (Frame guard_malloc_counter <- (var guard_malloc_counter Int) elem <- (var elem Int) head <- (var head Int) head* <- (var head* Int) reach_error_ret <- (var reach_error_ret Int) call___assert_fail_ret0 <- (var call___assert_fail_ret0 Int) __blast_assert_ret <- (var __blast_assert_ret Int) call_reach_error_ret1 <- (var call_reach_error_ret1 Int) call_abort_ret2 <- (var call_abort_ret2 Int) __getMemory_ret <- (var __getMemory_ret Int) __getMemory::size <- (var __getMemory::size Int) call___blast_assert_ret3 <- (var call___blast_assert_ret3 Int) call___VERIFIER_nondet_int_ret4 <- (var call___VERIFIER_nondet_int_ret4 Int) my_malloc_ret <- (var my_malloc_ret Int) my_malloc::size <- (var my_malloc::size Int) call___getMemory_ret5 <- (var call___getMemory_ret5 Int) list_add_ret <- (var list_add_ret Int) list_add::new <- (var list_add::new Int) list_add::head <- (var list_add::head Int) call___blast_assert_ret6 <- (var call___blast_assert_ret6 Int) call___VERIFIER_nondet_int_ret7 <- (var call___VERIFIER_nondet_int_ret7 Int) list_del_ret <- (var list_del_ret Int) list_del::entry <- (var list_del::entry Int) main_ret <- (var main_ret Int) main::dev1 <- (var main::dev1 Int) main::dev2 <- (var main::dev2 Int) call_my_malloc_ret8 <- (var call_my_malloc_ret8 Int) call_my_malloc_ret9 <- (var call_my_malloc_ret9 Int) call_list_add_ret10 <- (var call_list_add_ret10 Int) call_list_add_ret11 <- (var call_list_add_ret11 Int) call_list_del_ret12 <- (var call_list_del_ret12 Int) call_list_add_ret13 <- (var call_list_add_ret13 Int) call_list_add_ret14 <- (var call_list_add_ret14 Int)) )
server: type: StmtLabel
server: Exception in thread "main" java.lang.reflect.InvocationTargetException
server: 	at jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
server: 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
server: 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
server: 	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)
server: 	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)
server: 	at kotlin.reflect.jvm.internal.KCallableImpl.call(KCallableImpl.kt:108)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:83)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:69)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:33)
server: 	at com.google.gson.internal.bind.TypeAdapters$34$1.read(TypeAdapters.java:979)
server: 	at com.google.gson.Gson.fromJson(Gson.java:1058)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.parseProcedures(XcfaAdapter.kt:191)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.read(XcfaAdapter.kt:109)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.read(XcfaAdapter.kt:29)
server: 	at com.google.gson.internal.bind.TypeAdapters$34$1.read(TypeAdapters.java:979)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.Gson.fromJson(Gson.java:1058)
server: 	at com.google.gson.Gson.fromJson(Gson.java:986)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:56)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:35)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:130)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
server: Caused by: org.antlr.v4.runtime.misc.ParseCancellationException
server: 	at org.antlr.v4.runtime.BailErrorStrategy.recover(BailErrorStrategy.java:51)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.funcLitExpr(StmtParser.java:764)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.expr(StmtParser.java:608)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.assignStmt(StmtParser.java:397)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.stmt(StmtParser.java:210)
server: 	at hu.bme.mit.theta.grammar.dsl.stmt.StatementWrapper.<init>(StmtParser.kt:54)
server: 	at hu.bme.mit.theta.xcfa.model.StmtLabel$Companion.fromString(XcfaLabel.kt:163)
server: 	... 27 more
server: Caused by: org.antlr.v4.runtime.NoViableAltException
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.noViableAlt(ParserATNSimulator.java:2026)
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.execATN(ParserATNSimulator.java:467)
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.adaptivePredict(ParserATNSimulator.java:393)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.funcLitExpr(StmtParser.java:736)
server: 	... 32 more
ErrorCodeException(code=1)
	at hu.bme.mit.theta.xcfa.cli.checkers.InProcessChecker.check(InProcessChecker.kt:118)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:242)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:60)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:85)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex24Kt$complexPortfolio24$checker$1.invoke(complex24.kt:42)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex24Kt$complexPortfolio24$checker$1.invoke(complex24.kt:42)
	at hu.bme.mit.theta.xcfa.cli.portfolio.ConfigNode.execute(stm.kt:44)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:111)
	at hu.bme.mit.theta.xcfa.cli.portfolio.HierarchicalNode.execute(stm.kt:33)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:111)
	at hu.bme.mit.theta.xcfa.cli.checkers.ConfigToPortfolioKt.getPortfolioChecker$lambda$0(ConfigToPortfolio.kt:82)
	at hu.bme.mit.theta.analysis.algorithm.SafetyChecker.check(SafetyChecker.java:27)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:242)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:60)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:85)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:120)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:35)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:130)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
Caught exception: ErrorCodeException(code=1)
Handling exception as TimeoutOrNotSolvableError
Current configuration: XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, property=ERROR_LOCATION, frontendConfig=FrontendConfig(lbeLevel=LBE_SEQ, staticCoi=false, loopUnroll=1000, forceUnroll=-1, enableFew=false, inputType=C, specConfig=CFrontendConfig(arithmetic=efficient, architecture=LP64)), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=300000, inProcess=true, specConfig=CegarConfig(initPrec=EMPTY, porLevel=NOPOR, porRandomSeed=-1, coi=NO_COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=Z3, validateAbstractionSolver=false, domain=EXPL, maxEnum=1, search=ERR, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=Z3, validateRefinementSolver=false, refinement=SEQ_ITP, exprSplitter=WHOLE, pruneStrategy=FULL))), outputConfig=OutputConfig(versionInfo=false, enableOutput=false, resultFolder=., cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=false), chcOutputConfig=ChcOutputConfig(disable=false), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=INFO, argdebug=false, argToFile=false))
Registered Legacy-Z3 SolverManager
Registered Z3 SolverManager
Registered JavaSMT SolverManager
Registered SMT-LIB SolverManager
Starting verification of UnnamedXcfa using CEGAR
server: line 1:12 no viable alternative at input '*'
server: Could not parse (assign head* 2)
server: scope: Scope{
server: enclosingScope: null
server: symbolTable: SymbolTable(hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@23bb8443, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@49438269, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@ba2f4ec, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@1c1bbc4e, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@306cf3ea, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@e1de817, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@66ea1466, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@1601e47, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@3bffddff, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@66971f6b, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@50687efb, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@517bd097, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@142eef62, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@4d2a1da3, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@252f626c, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@33f98231, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@b10a26d, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@74075134, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@7e4d2287, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@3f4b840d, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@31464a43, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@4682eba5, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@6d9fb2d1, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@61fafb74, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@540a903b, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@58496dc, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@151db587, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@238acd0b, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@23811a09, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@2125ad3, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@7a5b769b, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@f4c0e4e, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fd204099f38@24361cfc) }
server: env: Env( (Frame guard_malloc_counter <- (var guard_malloc_counter Int) elem <- (var elem Int) head <- (var head Int) head* <- (var head* Int) reach_error_ret <- (var reach_error_ret Int) call___assert_fail_ret0 <- (var call___assert_fail_ret0 Int) __blast_assert_ret <- (var __blast_assert_ret Int) call_reach_error_ret1 <- (var call_reach_error_ret1 Int) call_abort_ret2 <- (var call_abort_ret2 Int) __getMemory_ret <- (var __getMemory_ret Int) __getMemory::size <- (var __getMemory::size Int) call___blast_assert_ret3 <- (var call___blast_assert_ret3 Int) call___VERIFIER_nondet_int_ret4 <- (var call___VERIFIER_nondet_int_ret4 Int) my_malloc_ret <- (var my_malloc_ret Int) my_malloc::size <- (var my_malloc::size Int) call___getMemory_ret5 <- (var call___getMemory_ret5 Int) list_add_ret <- (var list_add_ret Int) list_add::new <- (var list_add::new Int) list_add::head <- (var list_add::head Int) call___blast_assert_ret6 <- (var call___blast_assert_ret6 Int) call___VERIFIER_nondet_int_ret7 <- (var call___VERIFIER_nondet_int_ret7 Int) list_del_ret <- (var list_del_ret Int) list_del::entry <- (var list_del::entry Int) main_ret <- (var main_ret Int) main::dev1 <- (var main::dev1 Int) main::dev2 <- (var main::dev2 Int) call_my_malloc_ret8 <- (var call_my_malloc_ret8 Int) call_my_malloc_ret9 <- (var call_my_malloc_ret9 Int) call_list_add_ret10 <- (var call_list_add_ret10 Int) call_list_add_ret11 <- (var call_list_add_ret11 Int) call_list_del_ret12 <- (var call_list_del_ret12 Int) call_list_add_ret13 <- (var call_list_add_ret13 Int) call_list_add_ret14 <- (var call_list_add_ret14 Int)) )
server: type: StmtLabel
server: Exception in thread "main" java.lang.reflect.InvocationTargetException
server: 	at jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
server: 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
server: 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
server: 	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)
server: 	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)
server: 	at kotlin.reflect.jvm.internal.KCallableImpl.call(KCallableImpl.kt:108)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:83)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:69)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:33)
server: 	at com.google.gson.internal.bind.TypeAdapters$34$1.read(TypeAdapters.java:979)
server: 	at com.google.gson.Gson.fromJson(Gson.java:1058)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.parseProcedures(XcfaAdapter.kt:191)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.read(XcfaAdapter.kt:109)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.read(XcfaAdapter.kt:29)
server: 	at com.google.gson.internal.bind.TypeAdapters$34$1.read(TypeAdapters.java:979)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.Gson.fromJson(Gson.java:1058)
server: 	at com.google.gson.Gson.fromJson(Gson.java:986)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:56)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:35)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:130)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
server: Caused by: org.antlr.v4.runtime.misc.ParseCancellationException
server: 	at org.antlr.v4.runtime.BailErrorStrategy.recover(BailErrorStrategy.java:51)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.funcLitExpr(StmtParser.java:764)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.expr(StmtParser.java:608)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.assignStmt(StmtParser.java:397)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.stmt(StmtParser.java:210)
server: 	at hu.bme.mit.theta.grammar.dsl.stmt.StatementWrapper.<init>(StmtParser.kt:54)
server: 	at hu.bme.mit.theta.xcfa.model.StmtLabel$Companion.fromString(XcfaLabel.kt:163)
server: 	... 27 more
server: Caused by: org.antlr.v4.runtime.NoViableAltException
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.noViableAlt(ParserATNSimulator.java:2026)
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.execATN(ParserATNSimulator.java:467)
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.adaptivePredict(ParserATNSimulator.java:393)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.funcLitExpr(StmtParser.java:736)
server: 	... 32 more
ErrorCodeException(code=1)
	at hu.bme.mit.theta.xcfa.cli.checkers.InProcessChecker.check(InProcessChecker.kt:118)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:242)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:60)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:85)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex24Kt$complexPortfolio24$checker$1.invoke(complex24.kt:42)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex24Kt$complexPortfolio24$checker$1.invoke(complex24.kt:42)
	at hu.bme.mit.theta.xcfa.cli.portfolio.ConfigNode.execute(stm.kt:44)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:111)
	at hu.bme.mit.theta.xcfa.cli.portfolio.HierarchicalNode.execute(stm.kt:33)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:111)
	at hu.bme.mit.theta.xcfa.cli.checkers.ConfigToPortfolioKt.getPortfolioChecker$lambda$0(ConfigToPortfolio.kt:82)
	at hu.bme.mit.theta.analysis.algorithm.SafetyChecker.check(SafetyChecker.java:27)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:242)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:60)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:85)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:120)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:35)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:130)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
Caught exception: ErrorCodeException(code=1)
Handling exception as TimeoutOrNotSolvableError
Current configuration: XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, property=ERROR_LOCATION, frontendConfig=FrontendConfig(lbeLevel=LBE_SEQ, staticCoi=false, loopUnroll=1000, forceUnroll=-1, enableFew=false, inputType=C, specConfig=CFrontendConfig(arithmetic=efficient, architecture=LP64)), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=0, inProcess=true, specConfig=CegarConfig(initPrec=EMPTY, porLevel=NOPOR, porRandomSeed=-1, coi=NO_COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=Z3, validateAbstractionSolver=false, domain=PRED_CART, maxEnum=1, search=ERR, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=Z3, validateRefinementSolver=false, refinement=SEQ_ITP, exprSplitter=WHOLE, pruneStrategy=FULL))), outputConfig=OutputConfig(versionInfo=false, enableOutput=false, resultFolder=., cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=false), chcOutputConfig=ChcOutputConfig(disable=false), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=INFO, argdebug=false, argToFile=false))
Registered Legacy-Z3 SolverManager
Registered Z3 SolverManager
Registered JavaSMT SolverManager
Registered SMT-LIB SolverManager
Starting verification of UnnamedXcfa using CEGAR
server: line 1:12 no viable alternative at input '*'
server: Could not parse (assign head* 2)
server: scope: Scope{
server: enclosingScope: null
server: symbolTable: SymbolTable(hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@23bb8443, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@49438269, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@ba2f4ec, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@1c1bbc4e, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@306cf3ea, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@e1de817, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@66ea1466, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@1601e47, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@3bffddff, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@66971f6b, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@50687efb, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@517bd097, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@142eef62, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@4d2a1da3, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@252f626c, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@33f98231, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@b10a26d, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@74075134, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@7e4d2287, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@3f4b840d, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@31464a43, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@4682eba5, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@6d9fb2d1, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@61fafb74, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@540a903b, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@58496dc, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@151db587, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@238acd0b, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@23811a09, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@2125ad3, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@7a5b769b, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@f4c0e4e, hu.bme.mit.theta.grammar.gson.VarDeclAdapter$$Lambda$10/0x00007fdf60099f38@24361cfc) }
server: env: Env( (Frame guard_malloc_counter <- (var guard_malloc_counter Int) elem <- (var elem Int) head <- (var head Int) head* <- (var head* Int) reach_error_ret <- (var reach_error_ret Int) call___assert_fail_ret0 <- (var call___assert_fail_ret0 Int) __blast_assert_ret <- (var __blast_assert_ret Int) call_reach_error_ret1 <- (var call_reach_error_ret1 Int) call_abort_ret2 <- (var call_abort_ret2 Int) __getMemory_ret <- (var __getMemory_ret Int) __getMemory::size <- (var __getMemory::size Int) call___blast_assert_ret3 <- (var call___blast_assert_ret3 Int) call___VERIFIER_nondet_int_ret4 <- (var call___VERIFIER_nondet_int_ret4 Int) my_malloc_ret <- (var my_malloc_ret Int) my_malloc::size <- (var my_malloc::size Int) call___getMemory_ret5 <- (var call___getMemory_ret5 Int) list_add_ret <- (var list_add_ret Int) list_add::new <- (var list_add::new Int) list_add::head <- (var list_add::head Int) call___blast_assert_ret6 <- (var call___blast_assert_ret6 Int) call___VERIFIER_nondet_int_ret7 <- (var call___VERIFIER_nondet_int_ret7 Int) list_del_ret <- (var list_del_ret Int) list_del::entry <- (var list_del::entry Int) main_ret <- (var main_ret Int) main::dev1 <- (var main::dev1 Int) main::dev2 <- (var main::dev2 Int) call_my_malloc_ret8 <- (var call_my_malloc_ret8 Int) call_my_malloc_ret9 <- (var call_my_malloc_ret9 Int) call_list_add_ret10 <- (var call_list_add_ret10 Int) call_list_add_ret11 <- (var call_list_add_ret11 Int) call_list_del_ret12 <- (var call_list_del_ret12 Int) call_list_add_ret13 <- (var call_list_add_ret13 Int) call_list_add_ret14 <- (var call_list_add_ret14 Int)) )
server: type: StmtLabel
server: Exception in thread "main" java.lang.reflect.InvocationTargetException
server: 	at jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
server: 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
server: 	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
server: 	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)
server: 	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Instance.call(CallerImpl.kt:113)
server: 	at kotlin.reflect.jvm.internal.KCallableImpl.call(KCallableImpl.kt:108)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:83)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:69)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaLabelAdapter.read(XcfaLabelAdapter.kt:33)
server: 	at com.google.gson.internal.bind.TypeAdapters$34$1.read(TypeAdapters.java:979)
server: 	at com.google.gson.Gson.fromJson(Gson.java:1058)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.parseProcedures(XcfaAdapter.kt:191)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.read(XcfaAdapter.kt:109)
server: 	at hu.bme.mit.theta.xcfa.gson.XcfaAdapter.read(XcfaAdapter.kt:29)
server: 	at com.google.gson.internal.bind.TypeAdapters$34$1.read(TypeAdapters.java:979)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:161)
server: 	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:266)
server: 	at com.google.gson.Gson.fromJson(Gson.java:1058)
server: 	at com.google.gson.Gson.fromJson(Gson.java:986)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:56)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:35)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:130)
server: 	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
server: Caused by: org.antlr.v4.runtime.misc.ParseCancellationException
server: 	at org.antlr.v4.runtime.BailErrorStrategy.recover(BailErrorStrategy.java:51)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.funcLitExpr(StmtParser.java:764)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.expr(StmtParser.java:608)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.assignStmt(StmtParser.java:397)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.stmt(StmtParser.java:210)
server: 	at hu.bme.mit.theta.grammar.dsl.stmt.StatementWrapper.<init>(StmtParser.kt:54)
server: 	at hu.bme.mit.theta.xcfa.model.StmtLabel$Companion.fromString(XcfaLabel.kt:163)
server: 	... 27 more
server: Caused by: org.antlr.v4.runtime.NoViableAltException
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.noViableAlt(ParserATNSimulator.java:2026)
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.execATN(ParserATNSimulator.java:467)
server: 	at org.antlr.v4.runtime.atn.ParserATNSimulator.adaptivePredict(ParserATNSimulator.java:393)
server: 	at hu.bme.mit.theta.grammar.dsl.gen.StmtParser.funcLitExpr(StmtParser.java:736)
server: 	... 32 more
ErrorCodeException(code=1)
	at hu.bme.mit.theta.xcfa.cli.checkers.InProcessChecker.check(InProcessChecker.kt:118)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:242)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:60)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:85)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex24Kt$complexPortfolio24$checker$1.invoke(complex24.kt:42)
	at hu.bme.mit.theta.xcfa.cli.portfolio.Complex24Kt$complexPortfolio24$checker$1.invoke(complex24.kt:42)
	at hu.bme.mit.theta.xcfa.cli.portfolio.ConfigNode.execute(stm.kt:44)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:111)
	at hu.bme.mit.theta.xcfa.cli.portfolio.HierarchicalNode.execute(stm.kt:33)
	at hu.bme.mit.theta.xcfa.cli.portfolio.STM.execute(stm.kt:111)
	at hu.bme.mit.theta.xcfa.cli.checkers.ConfigToPortfolioKt.getPortfolioChecker$lambda$0(ConfigToPortfolio.kt:82)
	at hu.bme.mit.theta.analysis.algorithm.SafetyChecker.check(SafetyChecker.java:27)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:242)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt$backend$result$1.invoke(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.params.ExitCodesKt.exitOnError(ExitCodes.kt:60)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.backend(ExecuteConfig.kt:241)
	at hu.bme.mit.theta.xcfa.cli.ExecuteConfigKt.runConfig(ExecuteConfig.kt:85)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.run(XcfaCli.kt:120)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.access$run(XcfaCli.kt:35)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli$Companion.main(XcfaCli.kt:130)
	at hu.bme.mit.theta.xcfa.cli.XcfaCli.main(XcfaCli.kt)
Caught exception: ErrorCodeException(code=1)
Could not handle trigger ErrorCodeException(code=1) (Available triggers: [SolverError])
Caught exception: ErrorCodeException(code=1)
Handling exception as Anything
Current configuration: XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, property=ERROR_LOCATION, frontendConfig=FrontendConfig(lbeLevel=LBE_SEQ, staticCoi=false, loopUnroll=1000, forceUnroll=-1, enableFew=false, inputType=C, specConfig=CFrontendConfig(arithmetic=efficient, architecture=LP64)), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=100000, inProcess=false, specConfig=CegarConfig(initPrec=EMPTY, porLevel=NOPOR, porRandomSeed=-1, coi=NO_COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=mathsat:5.6.10, validateAbstractionSolver=false, domain=EXPL, maxEnum=1, search=ERR, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=mathsat:5.6.10, validateRefinementSolver=false, refinement=NWT_IT_WP, exprSplitter=WHOLE, pruneStrategy=FULL))), outputConfig=OutputConfig(versionInfo=false, enableOutput=false, resultFolder=., cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=false), chcOutputConfig=ChcOutputConfig(disable=false), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=INFO, argdebug=false, argToFile=false))
Registered Legacy-Z3 SolverManager
Registered Z3 SolverManager
Registered JavaSMT SolverManager
Registered SMT-LIB SolverManager
Starting verification of UnnamedXcfa using CEGAR
Configuration: (CegarChecker (XcfaArgAbstractor (PriorityWaitlist XcfaDistToErrComparator)) (XcfaSingleExprTraceRefiner ExprTraceNewtonChecker XcfaPrecRefiner))
Iteration 1
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...Process failed! (hu.bme.mit.theta.solver.smtlib.solver.SmtLibSolver.issueGeneralCommand(SmtLibSolver.java:311), hu.bme.mit.theta.solver.smtlib.solver.SmtLibSolverException: "unknown symbol: deref (line: 22)")
Caught exception: ErrorCodeException(code=221)
Handling exception as SolverError
Current configuration: XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, property=ERROR_LOCATION, frontendConfig=FrontendConfig(lbeLevel=LBE_SEQ, staticCoi=false, loopUnroll=1000, forceUnroll=-1, enableFew=false, inputType=C, specConfig=CFrontendConfig(arithmetic=efficient, architecture=LP64)), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=100000, inProcess=false, specConfig=CegarConfig(initPrec=EMPTY, porLevel=NOPOR, porRandomSeed=-1, coi=NO_COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=Z3, validateAbstractionSolver=false, domain=EXPL, maxEnum=1, search=ERR, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=Z3, validateRefinementSolver=false, refinement=NWT_IT_WP, exprSplitter=WHOLE, pruneStrategy=FULL))), outputConfig=OutputConfig(versionInfo=false, enableOutput=false, resultFolder=., cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=false), chcOutputConfig=ChcOutputConfig(disable=false), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=INFO, argdebug=false, argToFile=false))
Registered Legacy-Z3 SolverManager
Registered Z3 SolverManager
Registered JavaSMT SolverManager
Registered SMT-LIB SolverManager
Starting verification of UnnamedXcfa using CEGAR
Configuration: (CegarChecker (XcfaArgAbstractor (PriorityWaitlist XcfaDistToErrComparator)) (XcfaSingleExprTraceRefiner ExprTraceNewtonChecker XcfaPrecRefiner))
Iteration 1
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...done
|  |  Finished ARG: 11 nodes, 3 incomplete, 1 unsafe
| Checking abstraction done, result: (AbstractorResult Unsafe)
| Refining abstraction...
|  |  Trace length: 6
|  |  Checking trace...Process failed! (hu.bme.mit.theta.analysis.expr.refinement.ExprTraceNewtonChecker$1.visit(ExprTraceNewtonChecker.java:288), java.lang.UnsupportedOperationException: MemoryAssignStmt not supported (yet))
Caught exception: ErrorCodeException(code=202)
Handling exception as Anything
Current configuration: XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, property=ERROR_LOCATION, frontendConfig=FrontendConfig(lbeLevel=LBE_SEQ, staticCoi=false, loopUnroll=1000, forceUnroll=-1, enableFew=false, inputType=C, specConfig=CFrontendConfig(arithmetic=efficient, architecture=LP64)), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=300000, inProcess=false, specConfig=CegarConfig(initPrec=EMPTY, porLevel=NOPOR, porRandomSeed=-1, coi=NO_COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=Z3, validateAbstractionSolver=false, domain=EXPL, maxEnum=1, search=ERR, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=Z3, validateRefinementSolver=false, refinement=SEQ_ITP, exprSplitter=WHOLE, pruneStrategy=FULL))), outputConfig=OutputConfig(versionInfo=false, enableOutput=false, resultFolder=., cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=false), chcOutputConfig=ChcOutputConfig(disable=false), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=INFO, argdebug=false, argToFile=false))
Registered Legacy-Z3 SolverManager
Registered Z3 SolverManager
Registered JavaSMT SolverManager
Registered SMT-LIB SolverManager
Starting verification of UnnamedXcfa using CEGAR
Configuration: (CegarChecker (XcfaArgAbstractor (PriorityWaitlist XcfaDistToErrComparator)) (XcfaSingleExprTraceRefiner ExprTraceSeqItpChecker XcfaPrecRefiner))
Iteration 1
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...done
|  |  Finished ARG: 11 nodes, 3 incomplete, 1 unsafe
| Checking abstraction done, result: (AbstractorResult Unsafe)
| Refining abstraction...
|  |  Trace length: 6
|  |  Checking trace...done, result: (ExprTraceStatus Infeasible)
|  |  Pruning whole ARGdone
Refining abstraction done, result: (RefinerResult Spurious)
! Precision DID change in this iteration
Iteration 2
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...done
|  |  Finished ARG: 11 nodes, 3 incomplete, 1 unsafe
| Checking abstraction done, result: (AbstractorResult Unsafe)
| Refining abstraction...
|  |  Trace length: 6
|  |  Checking trace...done, result: (ExprTraceStatus Infeasible)
|  |  Pruning whole ARGdone
Refining abstraction done, result: (RefinerResult Spurious)
! Precision did NOT change in this iteration
Iteration 3
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...done
|  |  Finished ARG: 11 nodes, 3 incomplete, 1 unsafe
| Checking abstraction done, result: (AbstractorResult Unsafe)
Counterexample hash check: NO new cex found
Process failed! (hu.bme.mit.theta.analysis.runtimemonitor.CexMonitor.throwNotSolvable(CexMonitor.kt:61), hu.bme.mit.theta.common.exception.NotSolvableException: Task is not solvable with this configuration!)
Caught exception: ErrorCodeException(code=220)
Handling exception as Anything
Current configuration: XcfaConfig(inputConfig=InputConfig(inputFile=null, catFile=null, parseCtx=null, xcfaWCtx=present, propertyFile=null, property=ERROR_LOCATION, frontendConfig=FrontendConfig(lbeLevel=LBE_SEQ, staticCoi=false, loopUnroll=1000, forceUnroll=-1, enableFew=false, inputType=C, specConfig=CFrontendConfig(arithmetic=efficient, architecture=LP64)), backendConfig=BackendConfig(backend=CEGAR, solverHome=/home/runner/work/theta/theta/Theta/solvers, timeoutMs=0, inProcess=false, specConfig=CegarConfig(initPrec=EMPTY, porLevel=NOPOR, porRandomSeed=-1, coi=NO_COI, cexMonitor=CHECK, abstractorConfig=CegarAbstractorConfig(abstractionSolver=Z3, validateAbstractionSolver=false, domain=PRED_CART, maxEnum=1, search=ERR, havocMemory=false), refinerConfig=CegarRefinerConfig(refinementSolver=Z3, validateRefinementSolver=false, refinement=SEQ_ITP, exprSplitter=WHOLE, pruneStrategy=FULL))), outputConfig=OutputConfig(versionInfo=false, enableOutput=false, resultFolder=., cOutputConfig=COutputConfig(disable=true, useArr=false, useExArr=false, useRange=false), xcfaOutputConfig=XcfaOutputConfig(disable=false), chcOutputConfig=ChcOutputConfig(disable=false), witnessConfig=WitnessConfig(disable=false, svcomp=false, concretizerSolver=Z3, validateConcretizerSolver=false), argConfig=ArgConfig(disable=true)), debugConfig=DebugConfig(debug=false, stacktrace=false, logLevel=INFO, argdebug=false, argToFile=false))
Registered Legacy-Z3 SolverManager
Registered Z3 SolverManager
Registered JavaSMT SolverManager
Registered SMT-LIB SolverManager
Starting verification of UnnamedXcfa using CEGAR
Configuration: (CegarChecker (XcfaArgAbstractor (PriorityWaitlist XcfaDistToErrComparator)) (XcfaSingleExprTraceRefiner ExprTraceSeqItpChecker XcfaPrecRefiner))
Iteration 1
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...done
|  |  Finished ARG: 11 nodes, 3 incomplete, 1 unsafe
| Checking abstraction done, result: (AbstractorResult Unsafe)
| Refining abstraction...
|  |  Trace length: 6
|  |  Checking trace...done, result: (ExprTraceStatus Infeasible)
|  |  Pruning whole ARGdone
Refining abstraction done, result: (RefinerResult Spurious)
! Precision DID change in this iteration
Iteration 2
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...done
|  |  Finished ARG: 15 nodes, 3 incomplete, 1 unsafe
| Checking abstraction done, result: (AbstractorResult Unsafe)
| Refining abstraction...
|  |  Trace length: 8
|  |  Checking trace...done, result: (ExprTraceStatus Infeasible)
|  |  Pruning whole ARGdone
Refining abstraction done, result: (RefinerResult Spurious)
! Precision DID change in this iteration
Iteration 3
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...done
|  |  Finished ARG: 15 nodes, 4 incomplete, 1 unsafe
| Checking abstraction done, result: (AbstractorResult Unsafe)
| Refining abstraction...
|  |  Trace length: 8
|  |  Checking trace...done, result: (ExprTraceStatus Infeasible)
|  |  Pruning whole ARGdone
Refining abstraction done, result: (RefinerResult Spurious)
! Precision DID change in this iteration
Iteration 4
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...done
|  |  Finished ARG: 25 nodes, 6 incomplete, 1 unsafe
| Checking abstraction done, result: (AbstractorResult Unsafe)
| Refining abstraction...
|  |  Trace length: 11
|  |  Checking trace...done, result: (ExprTraceStatus Infeasible)
|  |  Pruning whole ARGdone
Refining abstraction done, result: (RefinerResult Spurious)
! Precision DID change in this iteration
Iteration 5
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...done
|  |  Finished ARG: 27 nodes, 6 incomplete, 1 unsafe
| Checking abstraction done, result: (AbstractorResult Unsafe)
| Refining abstraction...
|  |  Trace length: 11
|  |  Checking trace...done, result: (ExprTraceStatus Infeasible)
|  |  Pruning whole ARGdone
Refining abstraction done, result: (RefinerResult Spurious)
! Precision DID change in this iteration
Iteration 6
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...done
|  |  Finished ARG: 39 nodes, 9 incomplete, 1 unsafe
| Checking abstraction done, result: (AbstractorResult Unsafe)
| Refining abstraction...
|  |  Trace length: 13
|  |  Checking trace...done, result: (ExprTraceStatus Infeasible)
|  |  Pruning whole ARGdone
Refining abstraction done, result: (RefinerResult Spurious)
! Precision DID change in this iteration
Iteration 7
| Checking abstraction...
|  |  (Re)initializing ARG...done
|  |  Starting ARG: 1 nodes, 1 incomplete, 0 unsafe
|  |  Building ARG...done
|  |  Finished ARG: 47 nodes, 8 incomplete, 1 unsafe
| Checking abstraction done, result: (AbstractorResult Unsafe)
| Refining abstraction...
